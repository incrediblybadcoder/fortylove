# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

variables:
  isMainDirect: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isMainPullRequest: $[and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/main'))]
  isDevelopDirect: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  isDevelopPullRequest: $[and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/develop'))]

trigger:
  branches:
    include:
      - feature/*

pool:
  vmImage: "windows-latest"

steps:
  - task: Cache@2
    inputs:
      key: "gradle | \"$(Agent.OS)\" | **/build/**"
      restoreKeys: "gradle | \"$(Agent.OS)\""
      path: ".gradle"
    displayName: "Cache dependencies and build directory"

  - task: JavaToolInstaller@0
    inputs:
      versionSpec: "17"
      jdkArchitectureOption: "x64"
      jdkSourceOption: "PreInstalled"
    displayName: "Setup JDK 17"

  - task: Gradle@3
    inputs:
      workingDirectory: ""
      gradleWrapperFile: "gradlew.bat"
      gradleOptions: "-Xmx3072m"
      options: "-Pvaadin.productionMode --stacktrace --info"
      javaHomeOption: "JDKVersion"
      jdkVersionOption: "1.17"
      jdkArchitectureOption: "x64"
      publishJUnitResults: true
      testResultsFiles: "**/TEST-*.xml"
      tasks: "build"
    displayName: "Gradle Build"

  - task: PowerShell@2
    inputs:
      targetType: "inline"
      script: |
        Write-Host "Build.SourceBranch: $(Build.SourceBranch)"
        Write-Host "Build.Reason: $(Build.Reason)"
        Write-Host "System.PullRequest.TargetBranch: $(System.PullRequest.TargetBranch)"
        Write-Host "isMainDirect: $(isMainDirect)"
        Write-Host "isMainPullRequest: $(isMainPullRequest)"
        Write-Host "isDevelopDirect: $(isDevelopDirect)"
        Write-Host "isDevelopPullRequest: $(isDevelopPullRequest)"
    condition: always()
    displayName: "Print Deployment Variables"

  - task: PushToHeroku@0
    inputs:
      ApiKey: "$(HEROKU_API_KEY)"
      AppName: "$(HEROKU_APP_NAME_PRODUCTION)"
      PushRoot: "$(System.DefaultWorkingDirectory)"
    condition: and(succeeded(), or(variables.isMainDirect, variables.isMainPullRequest))
    displayName: "Deploy to Heroku Production"

  - task: PushToHeroku@0
    inputs:
      ApiKey: "$(HEROKU_API_KEY)"
      AppName: "$(HEROKU_APP_NAME_DEVELOP)"
      PushRoot: "$(System.DefaultWorkingDirectory)"
    condition: and(succeeded(), or(variables.isDevelopDirect, variables.isDevelopPullRequest))
    displayName: "Deploy to Heroku Develop"